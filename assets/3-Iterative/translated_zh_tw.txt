當我正在使用大型語言模型構建應用程序時，我不認為我曾經在第一次嘗試時遇到了最終應用程序中使用的提示。
 但這並不重要，只要您有一個良好的過程進行迭代，使您的提示更好，那麼您就能找到適合達到您想要實現的任務的提示。
 您可能聽過我說過當我訓練機器學習模型時，第一次幾乎從來沒有成功過。
 實際上，如果我訓練的第一個模型有效，我會非常驚訝。
 話雖如此，在提示方面機率可能略微高一些，但是，第一次提示是否起作用並不重要。
 最重要的是為您的應用程序獲得有效提示的過程。
 因此，讓我們進入代碼，並讓我向您展示一些框架，以了解如何逐步開發提示。
 所以如果您之前曾與我一起參加過機器學習課程，您可能已經見過我使用一個圖表，說明在機器學習開發中，您通常會有一個想法，然後實施它。
 因此，編寫代碼，獲取數據，訓練模型，這就給出了實驗結果。
 然後您可以查看該輸出，進行錯誤分析，找出它在哪裡起作用或不起作用，然後甚至可以更改您要解決的問題的確切想法或方法，然後更改您的實施，再次運行實驗等等，不斷迭代，以獲得有效的機器學習模型。
 如果您不熟悉機器學習，並且之前沒有看過這個圖表，請不要擔心，對於本演示的其餘部分來說並不重要。
 但是，當您編寫提示以使用OOM開發應用程序時，這一過程可能非常相似，您對要完成的任務或任務感到有想法，然後可以嘗試首先編寫提示，這希望清晰而具體，也許如果適當，給系統思考的時間，然後運行它，看看得到的結果。
 如果第一次效果不太好，則需要迭代過程，找出為什麼指示不夠清晰或為什麼沒有給算法足夠的時間來思考，以使您能夠完善想法，完善提示等，並在這個過程中反覆循環，直到您為應用獲得一個適合的提示。
 這也是為什麼我個人沒有花太多時間關注在網絡文章中說30種完美提示的原因之一，因為我認為可能沒有一個適用於所有情況的完美提示。
 更重要的是，您有一個開發適合您特定應用程序的好提示的過程。
 因此，讓我們一起查看代碼中的示例。
 我在這裡擁有您在先前的視頻中看到的初始代碼，已經將其從OpenAI和Port OS轉換。
 在這裡，我們獲取了所需的OpenAI API密鑰，這是您上次看到的相同輔助功能。
 我打算使用椅子事實表的摘要作為運行示例。
 所以讓我粘貼它在這裡。
 如果您需要更仔細地閱讀它，請暫停左側的筆記本中閱讀。
但這是有關椅子的事實表，描述了它是中世紀風格家具系列的一部分，介紹了構造，尺寸，選項，材料等。
 它來自意大利。
 所以假設您想要使用此事實表幫助營銷團隊為網上零售網站編寫描述。
 創建基於技術事實表的產品描述。
如下所示，讓我將其粘貼到這裡。
 所以我的提示是：您的任務是根據概述事實表幫助營銷團隊創建零售網站或產品描述等。
這是我解釋大型語言模型任務的第一次嘗試。
 那麼讓我按Shift + Enter，這會執行。
幾秒鐘後，我們得到了這個結果。
看起來它做得很好，寫了一個描述，介紹了一個令人驚嘆的中世紀靈感辦公椅，完美的版本等等，但當我看到這個時，我會覺得，哇，這太長了。
它確實做得很好，按照我要求的那樣，從技術規格表開始寫產品描述。
但當我看到這個時，我會覺得這有點長。
也許我們希望它短一點。
於是我有了一個想法，撰寫了一個提示，得到了結果。
我對結果不太滿意，因為它太長了，所以我會澄清我的提示，說使用最多50個單詞來嘗試更好地引導所需長度，然後再運行它。
好的，這看起來就像是產品的更短描述，介紹了一個中世紀靈感的辦公椅，等等，你只需要五個單詞，那就是時尚和實用。
不錯。
讓我再次檢查這個長度。
所以我要根據空格將反應進行分割，然後打印出長度。
所以是52個單詞。
實際上很不錯。
大型語言模型還好，但對於關於非常精確的字數的指令，它們不是很擅長，但實際上並不壞。
有時它會打印出一些60或65等詞，但這還算合理。
讓我再運行一遍。
但這些是告訴大型語言模型要輸出的長度的不同方法。
這是一、二、三。
我數了一下這些句子。
看起來我做得很好。
我也看到過有些人做些其他的事情，例如使用最多280個字符。
大型語言模型由於它們解釋文本的方式使用了一個稱為tokenizer的東西，所以它們往往不太擅長計算字符。
但讓我們看看，281個字符。
它實際上意外的接近。
通常大型語言模型不會完全接近。
但這些是不同的方式，他們可以玩弄來控制輸出的長度，然後只需將其切換回使用最多50個單詞即可。
這就是我們剛剛得到的結果。
當我們繼續為我們的網站完善這個文本時，我們可能會決定，哇，這個網站並不是直接銷售給消費者的，而是打算向家具零售商銷售椅子，他們將對椅子的技術細節和材料更感興趣。
在這種情況下，您可以考慮針對技術細節進行修改提示，使其更加精確。
所以我繼續修改這個提示。
我要說，這個描述是為家具零售商而設，因此應該是技術性的，重點在於材料、產品和構造。
好的，讓我們運行一下。
看起來不錯。
它說，有鍍鋁基座和氣動椅子。
高品質的材料。
所以通過改變提示，你可以讓它更加關注你想要的特定特徵。
當我看到這個時，我可能會決定，在描述的末尾，我也想包括產品ID。
所以這個椅子有兩個產品，SWC 110和SOC 100。
所以也許我可以進一步改進這個提示。
為了讓它給我提供產品ID，我可以在描述的末尾添加這個指令，“在技術規格中包括每7個字符的產品ID”。
然後運行它，看看會發生什麼。
所以它說，介紹了我們的中世紀靈感辦公椅，殼色，講述了塑料鍍層鋁基座，實用，有一些選擇，講述了兩個產品ID。
所以這看起來很不錯。
你剛剛看到的是許多開發人員迭代式提示開發的簡短示例。
通過。
我認為一個準則是，在上一個視頻中，你看到Yisa分享了許多最佳實踐。
所以我通常做的是牢記這樣的最佳實踐，要清晰具體，如果必要的話，讓模型有時間思考。
在這些方面，值得經常嘗試首次嘗試撰寫提示，看看會發生什麼，然後從這裡開始逐步修改提示，以更接近所需的結果。
因此，許多成功的提示在各種程序中使用時是通過類似這樣的迭代過程得到的。
為了好玩，讓我給你展示一個更複雜的提示示例，這可能讓你了解ChatGPT可以做些什麼，這裡我只添加了一些額外的說明。
在描述之後，包括一個給出產品尺寸的表，然後你將把所有內容格式化為HTML。
所以讓我們運行它。
在實踐中，你最終會得到像這樣的提示，但這要經過多次迭代才能達到。
我不認為我認識任何人會在第一次嘗試讓系統處理一份事實表時就撰寫出這個完美的提示。
這實際上輸出了一堆HTML。
讓我們顯示HTML，看看這是否是有效的HTML，看看它是否起作用。
我並不知道它是否會成功，但讓我們看看。
哦，好的。
很棒。
看起來像一把椅子的描述。
結構，材料，產品尺寸。
哦，看來我漏掉了使用不超過50個單詞的指示，所以這有點長，但如果你需要，你甚至可以自由暫停視頻，讓它更加簡潔，重新生成并查看結果。
因此，我希望你從這個視頻中了解到，提示開發是一個迭代過程。
嘗試一些提示，看看它如何未實現你想要的完美，然後考慮如何澄清你的指示或者在某些情況下，想想如何讓它有更多的思考空間，以使其更接近你想要的結果。
我認為成為一個有效的提示工程師的關鍵並不是知道完美的提示，而是擁有一個開發對你的應用程序有效的提示的好過程。
在這個視頻中，我用一個例子說明了如何開發提示。
對於更複雜的應用程序，有時你會有多個例子，比如說10個、甚至50個或100個事實表，然後迭代地開發提示並對一大批案例進行評估。
但對於大多數應用程序的早期開發，我看到許多人都像我這樣只使用一個示例進行開發，但對於更成熟的應用程序，有時評估提示是否適用於更大的一組示例是有用的，比如在幾十個事實表上測試不同的提示，看看在多個事實表上的平均或最壞情況表現如何。
但通常只有當應用程序更成熟，你需要這些指標來驅動提示改進的增量的最後幾個步驟時，才會這樣做。
因此，請嘗試在Jupyter代碼筆記本示例中嘗試不同的變體，看看你會得到什麼結果。
當你完成時，讓我們繼續下一個視頻，在那裡，我們將談論大型語言模型在軟件應用程序中的一個非常常見的用途，即總結文本。
