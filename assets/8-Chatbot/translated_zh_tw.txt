用大型語言模型的一個令人興奮的地方是，您可以使用它來建立一個自定義的聊天機器人，只需投入一些努力。
Web界面ChatGPT是一種讓您擁有對話界面、透過大型語言模型進行對話的方式。
但最酷的是，您還可以使用大型語言模型來建立自己的自定義聊天機器人，也許是一個模擬人工智能客戶服務代表或用於餐廳點餐的AI點餐員的角色。
在本視頻中，您將學習如何為自己進行操作。

我將詳細描述OpenAI聊天完成格式的組件，然後您將建立一個聊天機器人。
首先，像往常一樣設置OpenAI Python包。
像ChatGPT這樣的聊天機器人模型實際上是訓練成以一系列訊息作為輸入並返回由模型生成的輸出訊息。
因此，即使聊天格式旨在使此類多輪對話容易，通過先前的視頻，我們也已經了解到，它對於不帶任何對話的單輪任務同樣有用。
接下來，我們將定義兩個幫助函數。
這是我們在所有視頻中一直在使用的getCompletion函數，但是如果您看一下，我們提供了提示，但在函數內部，我們實際上是將此提示放入了看起來像某種用戶訊息的地方。
這是因為ChatGPT模型是一種聊天機器人模型，這意味著它被訓練為將一系列訊息作為輸入，然後返回模型生成的訊息作為輸出。
因此，用戶訊息是輸入，然後助手訊息是輸出。

在本視頻中，我們將使用一個不同的幫助函數，並且不再僅提供單個提示作為輸入和獲取單個完成，而是將一系列訊息傳遞。
這些訊息可以來自不同的角色，因此我將描述這些角色。
這是訊息列表的示例。
因此，第一個訊息是一個系統訊息，它提供了整體指導，之後是用戶和助手之間的交替。
並且這將繼續。
如果您曾經使用過ChatGPT網頁界面，那麼您的訊息就是用戶訊息，而ChatGPT的訊息就是助手訊息。
因此，系統訊息有助於設置助手的行為和形象，並且它充當對話的高級指令。
因此，您可以將其視為向助手耳語和引導其回應，而不使用戶意識到系統訊息。
所以，作為用戶，如果您曾經使用過ChatGPT，您可能不知道ChatGPT的系統訊息是什麼，這就是意圖。
系統訊息的好處在於為您，即開發人員，提供了一種在不將請求本身納入對話的情況下來構建對話的方式。
因此，您可以引導助手並耳語引導其回應而不使用戶意識到它。
因此，現在讓我們嘗試在對話中使用這些訊息。
因此，我們將使用新的幫助函數從訊息中獲取完成。

我們還使用了更高的溫度。
系統訊息說，您是一個像莎士比亞一樣說話的助手。
這是我們向助手描述其應有的行為。
然後第一個用戶訊息是，告訴我一個笑話。
接下來是，為什麼小雞過馬路？然後最後一個用戶訊息是，我不知道。

如果我們運行這個，回應是為了到達另一端。
讓我們重試一次。
要到達另一邊，女士，這是一個永遠不會失敗的老經典。
這是我們的莎士比亞式回應。
還有讓我們嘗試一件更明顯的事情，因為我想使其更加清晰。
這是助手訊息。

因此，在這裡，讓我們只需列印整個訊息回應。
為了使這更清楚，這個回應是助手訊息，角色是助手，訊息本身是內容。
這是這個輔助函數中發生的事情。
我們只是傳遞訊息的內容。
現在讓我們做另一個例子。
在這裡，我們的訊息是，助手訊息是：你是一個友善的聊天機器人，而第一個使用者訊息是：嗨，我的名字是Isa。
我們想得到第一個使用者訊息。
現在，讓我們執行這個，第一個助手訊息。
第一個訊息是：你好Isa，很高興見到你。
今天我能如何協助你?現在，讓我們再試一個例子。
在這裡，我們的訊息是，系統訊息：您是一個友善的聊天機器人，第一個使用者訊息是：是的，你能提醒我一下我的名字嗎？我們要得到回應。
正如您所看到的，模型實際上並不知道我的名字。
每次與語言模型進行交談時，每個訊息都是一個獨立的互動，這意味著您必須為模型提供當前對話中所涉及的所有相關訊息。
如果您希望模型基於先前對話的部分（引用或記住）來進行繪製，則必須將先前的交流提供給輸入模型。
因此，我們將其稱為上下文。
那麼，讓我們試試這個。
現在，我們已經提供了模型所需的上下文，即我的名字在之前的訊息中，我們將問同樣的問題，也就是問我的名字是什麼。
模型能夠回應，因為它在輸入的消息列表中有所有所需的上下文。

現在你要建立自己的聊天機器人。
這個聊天機器人將被稱為orderbot，我們將自動化收集用戶提示和助手回應，以建立這個orderbot。
它將在一家披薩餐廳接收訂單，因此首先，我們將定義這個輔助函數，它將收集我們的用戶訊息，以便我們可以避免手工輸入類似於之前的方式。
它將從下面構建的用戶界面中收集提示，然後將其附加到名為context的列表中，然後每次調用模型都會使用該上下文。
然後模型回應也會被添加到上下文中，所以這種模型訊息被添加到上下文中，用戶訊息也被添加到上下文中，依此類推，所以它變得越來越長。
這樣模型就有了它需要決定下一步要做什麼的資訊。
現在，我們將設置和運行此UI以顯示order bot，因此這是上下文，並且其中包含包含菜單的系統訊息，請注意，每次調用語言模型時，我們將使用相同的上下文，而上下文會隨時間不斷構建。
然後讓我們執行此操作。
好的，我會說，嗨，我想訂一個披薩。
而助理說，太棒了，您想點什麼披薩？我們有辣肉腸，芝士和茄子披薩。
它們的價格是多少？好的，我們有價格。
我想我會需要一個中等的茄子披薩。

因此，正如您可以想象的那樣，我們可以繼續這個對話，讓我們看一下我們在系統訊息中放置了什麼。
所以你是order bot，一個自動化服務，用於收集披薩餐廳的訂單。
你首先會問候顧客，然後收集訂單，然後問顧客是領取還是送貨。
您等待收集整個訂單，然後總結它並最後再次檢查顧客是否想要添加其他東西。
如果是外送，您可以請求地址。
最後，您收取費用。
確保澄清所有選項，額外的和尺寸來唯一標識菜單中的項目。
您用簡短、非常對話、友好的風格回答。
菜單包括，然後這裡有菜單。
所以讓我們回到我們的對話，看看助手是否一直按照說明進行。
好的，很好，助手問我們是否需要任何配料，我們有點明確指定了助手信息。
所以我想我們不需要額外的配料。
東西……當然。
還有什麼可以點嗎？嗯，讓我們乾脆喝點水。
实际上，炸薯條。
小的還是大的？這很好，因為我們在系統消息中要求助手澄清額外的選項和配菜。
所以你懂的，請隨意地嘗試。
您可以暫停視頻，並在左側的筆記本中運行它。
因此，現在我們可以要求模型根據對話創建JSON摘要，以便發送給訂單系統。
所以我們現在正在添加另一個系統消息，這是一個指令，我們正在說明創建以前食品訂單的JSON摘要，對每個項目進行價格分類，字段應該是一個比薩餅，包括邊，兩個配料清單，三個飲料清單，四個配菜清單，以及最後的總價格。
您還可以在此處使用用戶消息，這不必是系統消息。
所以讓我們執行這個。
請注意，這種情況下我們使用較低的溫度，因為對於這些任務，我們希望輸出具有一定的可預測性。
對於對話代理，您可能需要使用較高的溫度，但在這種情況下，我也會使用較低的溫度，因為對於客戶助手聊天機器人，您可能也希望輸出具有一定的可預測性。
因此，在這裡，我們擁有我們訂單的摘要，因此如果我們想要，我們可以將其提交給訂單系統。
所以你有了自己的訂單聊天機器人。
隨意自定義它，並使用系統消息玩轉聊天機器人，使其以不同的個性和不同的知識行事。
